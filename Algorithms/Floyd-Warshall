#include <iostream>
#include <vector>
#include <algorithm>

void FloydWarshall(std::vector<std::vector<int>> &graph) {
    const int size = graph.size();
    for(int k = 0; k < size; ++k) {
        for(int i = 0; i < size; ++i) {
            for(int j = 0; j < size; ++j) {
                graph[i][j] = std::min(graph[i][j], graph[i][k] + graph[k][j]);
            }
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    int number_of_vertex;
    std::cin >> number_of_vertex;
    std::vector<std::vector<int>> graph(number_of_vertex);
    for (int i = 0; i < number_of_vertex; ++i) {
        graph[i].resize(number_of_vertex);
        for (int j = 0; j < number_of_vertex; ++j) {
            std::cin >> graph[i][j];
        }
    }

    FloydWarshall(graph);

    for(int i = 0; i < number_of_vertex; ++i) {
        for(int j = 0; j < number_of_vertex; ++j) {
            std::cout << graph[i][j] << " ";
        }
        std::cout << '\n';
    }

}


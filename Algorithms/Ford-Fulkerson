#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdint>

#define MaxFlowPerIteration 1000000000
using weight_t = int64_t;

struct Edge {
    int from;
    int to;
    weight_t flow;
    weight_t capacity;
    uint64_t back;// индекс обратного ребра
};

weight_t FindFlow(std::vector<std::vector<Edge>> & graph, int start, int finish, int64_t cur_flow, std::vector<bool> &status) {
    status[start] = true;
    if(start == finish) {
        return cur_flow;
    }
    for(auto& cur_edge : graph[start]) {
        if(!status[cur_edge.to] && (cur_edge.capacity - cur_edge.flow > 0)) {
            int final_flow = FindFlow(graph, cur_edge.to, finish, std::min(cur_flow, cur_edge.capacity - cur_edge.flow), status);
            if(final_flow > 0) {
                cur_edge.flow += final_flow;
                graph[cur_edge.to][cur_edge.back].flow -= final_flow;
                return final_flow;
            }
        }
    }
    return 0;
}

weight_t MaxFlow(std::vector<std::vector<Edge>> g, int start, int finish) {
    int cur_flow = 0;
    while(true) {
        std::vector<bool> status(g.size(), false);
        auto flow = FindFlow(g, start, finish, MaxFlowPerIteration, status);
        cur_flow += flow;
        if(flow == 0) {
            return cur_flow;
        }
    }
}


int main() {
    int n, m;
    std:: cin >> n >> m;
    std::vector<std::vector<Edge>> graph(n);
    for(int i = 0; i < m; ++i) {
        int from, to;
        int64_t weight;
        std::cin >> from >> to >> weight;
        --from;
        --to;
        graph[from].push_back(Edge{from, to, 0, weight, graph[to].size()});
        graph[to].push_back(Edge{to, from, 0, 0, graph[from].size() - 1});
    }

    int64_t answer = MaxFlow(graph, 0, n -1);
    std::cout << answer;
}

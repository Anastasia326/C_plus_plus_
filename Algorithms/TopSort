#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

enum Colors {
    undiscovered,
    discovered,
    processed
};

bool DFSVisit(const std::vector<std::vector<int>> &graph, int source, std::vector<Colors> &color,
              std::vector<int> &answer) {
    color[source] = discovered;
    for (size_t i = 0; i < graph[source].size(); ++i) {
        int node = graph[source][i];
        if (color[node] == discovered) {
            return false;
        } else if (color[node] == undiscovered) {
            if (!DFSVisit(graph, node, color, answer)) {
                return false;
            }
        }
    }
    color[source] = processed;
    answer.push_back(source);
    return true;
}

std::vector<int> TopSort(const std::vector<std::vector<int>> &graph) {
    std::vector<Colors> color(graph.size(), undiscovered);
    std::vector<int> answer;
    for (int i = 0; i < graph.size(); ++i) {
        if (color[i] == undiscovered) {
            if (!DFSVisit(graph, i, color, answer)) {
                while (!answer.empty()) {
                    answer.pop_back();
                }
                return answer;
            }
        }
    }
    return {answer.rbegin(), answer.rend()};
}

int main() {
    int n, m;
    std::cin >> n >> m;
    std::vector<std::vector<int>> graph(n);
    for (int i = 0; i < m; ++i) {
        int a, b;
        std::cin >> a >> b;
        graph[a - 1].push_back(b - 1);
    }
    std::vector<int> answer = TopSort(graph);
    if (answer.empty()) {
        std::cout << "-1";
        return 0;
    }
    for (auto i : answer) {
        std::cout << i + 1 << " ";
    }
}

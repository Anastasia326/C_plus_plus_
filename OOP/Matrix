#include <iostream>
#include <cstdlib>

class MatrixAllocationError {
public:
    MatrixAllocationError() = default;
};

class MatrixWrongSizeError {
public:
    MatrixWrongSizeError() = default;
};

class MatrixIndexError {
public:
    MatrixIndexError() = default;
};

class MatrixIsDegenerateError {
public:
    MatrixIsDegenerateError() = default;
};

// non-specified functions to get "zero" and "one" of type T

template <typename T> T getZero() {
    return T(0);
}

template <typename T> T getOne() {
    return T(1);
}


//================ class Rational ===============//
int Gcd(int p, int q) {
    while (p && q) {
        if (p > q) {
            p %= q;
        }
        else {
            q %= p;
        }
    }
    return p + q;
}
class RationalDivisionByZero {
public:
    RationalDivisionByZero() = default;
};

class Rational {
private:
    int p;
    int q; // is maintained to be positive
    void reduce() {
        if (q < 0) {
            p = -p;
            q = -q;
        }
        if (p == 0 && q != 0) {
            q = 1;
            return;
        }
        if (p < 0) {
            int nod = Gcd(-p, q);
            p /= nod;
            q /= nod;
        }
        else {
            int nod = Gcd(p, q);
            p /= nod;
            q /= nod;
        }
    }
public:
    Rational();
    Rational(int numerator, int denominator);
    Rational(int value);
    Rational& operator=(const Rational& other) = default;
    int getNumerator() const;
    int getDenominator() const;
    Rational operator-() const;
    Rational operator+() const;
    Rational& operator--();
    Rational& operator++();
    Rational operator--(int);
    Rational operator++(int);
    Rational& operator+=(const Rational& other);
    Rational& operator/=(const Rational& other);
    Rational& operator-=(const Rational& other);
    Rational& operator*=(const Rational& other);
};
std::istream& operator>>(std::istream& stream, Rational& number);
std::ostream& operator<<(std::ostream& stream, const Rational& number);
bool operator==(const Rational& number_first, const Rational& number_second);
bool operator>(const Rational& number_first, const Rational& number_second);
bool operator<(const Rational& number_first, const Rational& number_second);
bool operator>=(const Rational& number_first, const Rational& number_second);
bool operator<=(const Rational& number_first, const Rational& number_second);
bool operator!=(const Rational& number_first, const Rational& number_second);
Rational operator*(const Rational& number_first, const Rational& number_second);
Rational operator/(const Rational& number_first, const Rational& number_second);
Rational operator+(const Rational& number_first, const Rational& number_second);
Rational operator-(const Rational& number_first, const Rational& number_second);
Rational::Rational() : p(0), q(1) {}
Rational::Rational(int value) : p(value), q(1) {}
Rational::Rational(int numerator, int denominator) : p(numerator), q(denominator) {
    if (denominator == 0) {
        const RationalDivisionByZero ex;
        throw ex;
    }
    reduce();
}
int Rational::getNumerator() const {
    return p;
}
int Rational::getDenominator() const {
    return q;
}
Rational Rational::operator-() const {
    return { -p,q };
}
Rational Rational::operator+() const {
    return *this;
}
Rational& Rational::operator--() {
    Rational one(1, 1);
    *this -= one;
    return *this;
}
Rational& Rational::operator++() {
    Rational one(1, 1);
    *this += one;
    return *this;
}
Rational Rational::operator--(int) {
    Rational result = *this;
    --* this;
    return result;
}
Rational Rational::operator++(int) {
    Rational result = *this;
    ++* this;
    return result;
}
Rational& Rational::operator+=(const Rational& other) {
    p = p * other.q + q * other.p;
    q = q * other.q;
    reduce();
    return *this;
}
Rational operator/(int number_first, const Rational& number_second) {
    if (number_second.getNumerator() == 0) {
        const RationalDivisionByZero ex;
        throw ex;
    }
    Rational result = Rational(number_first, 1);
    result /= number_second;
    return result;
}

Rational& Rational::operator/=(const Rational& other) {
    if (other.getNumerator() == 0) {
        const RationalDivisionByZero ex;
        throw ex;
    }
    p *= other.q;
    q *= other.p;
    reduce();
    return *this;
}
Rational& Rational::operator-=(const Rational& other) {
    p = p * other.q - q * other.p;
    q = q * other.q;
    reduce();
    return *this;
}
Rational& Rational::operator*=(const Rational& other) {
    p *= other.p;
    q *= other.q;
    reduce();
    return *this;
}
std::istream& operator>>(std::istream& stream, Rational& number) {
    int read;
    stream >> read;
    char symbol = stream.get();
    if (symbol == '/') {
        int read_two;
        stream >> read_two;
        number = Rational(read, read_two);
    }
    else {
        number = Rational(read, 1);
    }
    return stream;
}
std::ostream& operator<<(std::ostream& stream, const Rational& number) {
    if (number.getDenominator() == 1) {
        stream << number.getNumerator();
    }
    else {
        stream << number.getNumerator() << '/' << number.getDenominator();
    }
    return stream;
}
bool operator==(const Rational& str_first, const Rational& str_second) {
    return((str_first.getNumerator() == str_second.getNumerator()) && (str_first.getDenominator() == str_second.getDenominator()));
}
bool operator>(const Rational& str_first, const Rational& str_second) {
    return(str_first.getNumerator() * str_second.getDenominator() > str_first.getDenominator() * str_second.getNumerator());
}
bool operator<(const Rational& number_first, const Rational& number_second) {
    return (number_first.getNumerator() * number_second.getDenominator() < number_first.getDenominator() * number_second.getNumerator());
}
bool operator>=(const Rational& number_first, const Rational& number_second) {
    return !(number_first < number_second);
}
bool operator<=(const Rational& number_first, const Rational& number_second) {
    return !(number_first > number_second);
}
bool operator!=(const Rational& number_first, const Rational& number_second) {
    return !(number_first == number_second);
}
Rational operator*(const Rational& number_first, const Rational& number_second) {
    Rational result = number_first;
    result *= number_second;
    return result;
}
Rational operator/(const Rational& number_first, const Rational& number_second) {
    Rational result = number_first;
    result /= number_second;
    return result;
}
Rational operator+(const Rational& number_first, const Rational& number_second) {
    Rational result = number_first;
    result += number_second;;
    return result;
}
Rational operator-(const Rational& number_first, const Rational& number_second) {
    Rational result = number_first;
    result -= number_second;;
    return result;
}

//=============== Matrix class ===============//

template <typename T>
class Matrix {
private:
    int rowsCnt;
    int colsCnt;
    T** array;

public:

    Matrix<T>(int m, int n) : rowsCnt(m), colsCnt(n) {
        array = new T* [rowsCnt];
        for (int i = 0; i < rowsCnt; ++i) {
            array[i] = new T[colsCnt];
            for(int j = 0; j < colsCnt; ++j){
                array[i][j] = getZero<T>();
            }
        }
    }

    void Swap(Matrix<T>& other) {
        std::swap(rowsCnt, other.rowsCnt);
        std::swap(colsCnt, other.colsCnt);
        std::swap(array, other.array);
    }

    virtual Matrix<T>& transpose() {
        *this = getTransposed();
        return *this;
    }

    Matrix<T> getTransposed() {
        Matrix<T> transposed(colsCnt, rowsCnt);
        for (int i = 0; i < colsCnt; i++) {
            for (int j = 0; j < rowsCnt; ++j) {
                transposed.array[i][j] = array[j][i];
            }
        }
        return transposed;
    }

    int getRowsNumber() const {
        return rowsCnt;
    }

    int getColumnsNumber() const {
        return colsCnt;
    }

    virtual Matrix<T>& operator+=(const Matrix<T>& other) {
        if (this == &other) {
            return *this *= 2;
        }
        if ((rowsCnt != other.rowsCnt) || (colsCnt != other.colsCnt)) {
            MatrixWrongSizeError ex;
            throw ex;
        }
        for (int i = 0; i < rowsCnt; ++i) {
            for (int j = 0; j < colsCnt; ++j) {
                array[i][j] += other.array[i][j];
            }
        }
        return *this;
    }

    virtual Matrix<T>& operator-=(const Matrix<T>& other) {
        if (this == &other) {
            Fill(*this, rowsCnt, colsCnt);
            return *this;
        }
        if ((rowsCnt != other.rowsCnt) || (colsCnt != other.colsCnt)) {
            MatrixWrongSizeError ex;
            throw ex;
        }
        for (int i = 0; i < rowsCnt; ++i) {
            for (int j = 0; j < colsCnt; ++j) {
                array[i][j] -= other.array[i][j];
            }
        }
        return *this;
    }

    virtual Matrix<T>& operator*=(const Matrix<T>& other) {
        if (colsCnt != other.rowsCnt) {
            MatrixWrongSizeError ex;
            throw ex;
        }
        Matrix result(rowsCnt, other.colsCnt);
        for (int i = 0; i < rowsCnt; ++i) {
            for (int j = 0; j < other.colsCnt; ++j) {
                for (int k = 0; k < colsCnt; k++) {
                    result.array[i][j] += array[i][k] * other.array[k][j];
                }
            }
        }
        *this = result;
        return *this;
    }

    virtual Matrix<T>& operator*=(const T& value) {
        for (int i = 0; i < rowsCnt; i++) {
            for (int j = 0; j < colsCnt; ++j) {
                array[i][j] *= value;
            }
        }
        return *this;
    }

    Matrix<T>(const Matrix<T>& other) : Matrix(other.rowsCnt, other.colsCnt) {
        for (int i = 0; i < rowsCnt; ++i) {
            for (int j = 0; j < colsCnt; ++j) {
                array[i][j] = other.array[i][j];
            }
        }
    }

    Matrix<T>& operator=(const Matrix<T>& other) {
        Matrix new_mat = other;
        Swap(new_mat);
        return *this;
    }

    T operator()(int i, int j) const {
        if (i >= rowsCnt || j >= colsCnt) {
            MatrixIndexError ex;
            throw ex;
        }
        return array[i][j];
    }

    T& operator()(int i, int j) {
        if (i >= rowsCnt || j >= colsCnt) {
            MatrixIndexError ex;
            throw ex;
        }
        return array[i][j];
    }

    void Fill(Matrix<T>& matrix, int rowsCnt, int colsCnt){
        for (int i = 0; i < rowsCnt; i++) {
            for (int j = 0; j < colsCnt; ++j) {
                matrix.array[i][j] = getZero<T>();
            }
        }
    }

    ~Matrix() {
        for (int i = 0; i < rowsCnt; ++i) {
            delete[] array[i];
        }
        delete[] array;
    }
};

template <typename T>
std::istream& operator>>(std::istream& stream, Matrix<T>& matrix) {
    for (int i = 0; i < matrix.getRowsNumber(); ++i) {
        for (int j = 0; j < matrix.getColumnsNumber(); ++j) {
            stream >> matrix(i, j);
        }
    }
    return stream;
}

template <typename T>
std::ostream& operator<<(std::ostream& stream, const Matrix<T>& matrix) {
    for (int i = 0; i < matrix.getRowsNumber(); ++i) {
        for (int j = 0; j < matrix.getColumnsNumber(); ++j) {
            stream << matrix(i, j) << ' ';
        }
        stream << '\n';
    }
    return stream;
}

template <typename T>
Matrix<T> operator*(Matrix<T> matrix_first, const Matrix<T>& matrix_second) {
    Matrix<T> result = matrix_first;
    result *= matrix_second;
    return result;
}

template <typename T>
Matrix<T> operator+(Matrix<T> matrix_first, const Matrix<T>& matrix_second) {
    Matrix<T> result = matrix_first;
    result += matrix_second;
    return result;
}

template <typename T>
Matrix<T> operator-(Matrix<T> matrix_first, const Matrix<T>& matrix_second) {
    Matrix<T> result = matrix_first;
    result -= matrix_second;
    return result;
}

template <typename T>
Matrix<T> operator*(const Matrix<T>& matrix_first,const T& value) {
    Matrix<T> result = matrix_first;
    result *= value;
    return result;
}

template <typename T>
Matrix<T> operator*(const T& value, const Matrix<T>& matrix_first) {
    Matrix<T> result = matrix_first;
    result *= value;
    return result;
}

//=============== SquareMatrix class ===============//

template <typename T>
class SquareMatrix : public Matrix<T> {
public:

    SquareMatrix<T>(int size) : Matrix<T>(size,size){
    }

    size_t getSize() const {
        return Matrix<T>::getRowsNumber();
    }

    SquareMatrix<T>& operator=(const SquareMatrix<T>& other){
            Matrix<T> new_mat = other;
            Matrix<T>::Swap(new_mat);
            return *this;
    }

    SquareMatrix<T>(const SquareMatrix<T>& other) : Matrix<T>(other) {
    }

    SquareMatrix<T>& transpose() override {
        Matrix<T>::transpose();
        return *this;
    }

    SquareMatrix<T> getTransposed() const {
        SquareMatrix<T> transposed = *this;
        transposed.transpose();
        return transposed;
    }

    SquareMatrix<T> getMatrixWithoutRowAndCol(int row, int col) const{
        SquareMatrix new_one(getSize() - 1);
        int offsetRow = 0;
        int offsetCol = 0;
        for(int i = 0; i < getSize() - 1; ++i) {
            if(i == row) {
                offsetRow = 1;
            }
            offsetCol = 0;
            for(int j = 0; j < getSize() - 1; ++j) {
                if(j == col) {
                    offsetCol = 1;
                }

                new_one(i ,j) = (*this)(i + offsetRow , j + offsetCol);
            }
        }
        return new_one;
    }

    T getDeterminant() const{
        T det = getZero<T>();
        T degree = getOne<T>();

        if (getSize() == 1) {
            return (*this)(0 , 0);
        } else if(getSize() == 2) {
            return (*this)(0 , 0) * (*this)(1, 1) - (*this)(0 , 1) * (*this)(1 , 0);
        }
        for (int j = 0; j < getSize(); ++j) {
            SquareMatrix New = getMatrixWithoutRowAndCol(0, j);
            det += degree * (*this)(0,j) * New.getDeterminant();
            degree = -degree;
        }
        return det;
    }

    T getTrace() const {
        T trace = getZero<T>();
        for (int i = 0; i < Matrix<T>::getRowsNumber(); ++i) {
                    trace += (*this)(i, i);
        }
        return trace;
    }

    SquareMatrix<T>& invert() {
       T det = getDeterminant();
       if (det == 0) {
           MatrixIsDegenerateError ex;
           throw ex;
       }

       SquareMatrix Adj(getSize());
       int size = getSize();
       if (size == 1) {
           Adj(0 ,0) = getOne<T>();
       } else {
           for (int i = 0; i < getSize(); ++i) {
               for (int j = 0; j < getSize(); ++j){
                   int minus = ((i + j) % 2 == 0);
                   Adj(i, j) = getMatrixWithoutRowAndCol(i, j).getDeterminant();
                   if ( minus == 0) {
                       Adj(i, j) *= (-1);
                   }
               }
           }
       }
        Adj.transpose() /= getDeterminant();
        *this = Adj;
        return *this;
    }

    SquareMatrix<T> getInverse() const {
        SquareMatrix<T> Result = *this;
        return Result.invert();
    }

    SquareMatrix<T>& operator+=(const SquareMatrix<T>& other)  {
        Matrix<T>::operator+=(other);
        return *this;
    }

    SquareMatrix<T>& operator-=(const SquareMatrix<T>& other)  {
        Matrix<T>::operator-=(other);
        return *this;
    }

    SquareMatrix<T>& operator*=(const SquareMatrix<T>& other) {
        Matrix<T>::operator*=(other);
        return *this;
    }

    SquareMatrix<T>& operator/=(const T& value) {
        for ( int i = 0; i < getSize(); ++i) {
            for (int j = 0; j < getSize(); ++j) {
                (*this)(i , j) /= value;
            }
        }
        return *this;
    }

    SquareMatrix<T>& operator*=(const T& value) override {
        for (int i = 0; i < getSize(); i++) {
            for (int j = 0; j < getSize(); ++j) {
                (*this)(i , j) *= value;
            }
        }
        return *this;
    }


};

template <typename T>
SquareMatrix<T> operator*(SquareMatrix<T> matrix_first, const SquareMatrix<T>& matrix_second) {
    return matrix_first *= matrix_second;
}

template <typename T>
SquareMatrix<T> operator+(SquareMatrix<T> matrix_first, const SquareMatrix<T>& matrix_second) {
    return matrix_first += matrix_second;
}

template <typename T>
SquareMatrix<T> operator-(SquareMatrix<T> matrix_first, const SquareMatrix<T>& matrix_second) {
    return matrix_first -= matrix_second;
}

template <typename T>
SquareMatrix<T> operator*(SquareMatrix<T> matrix_first,const T& value) {
    return matrix_first *= value;
}

template <typename T>
SquareMatrix<T> operator*(const T& value, SquareMatrix<T> matrix_first) {
    return matrix_first *= value;
}

// this works also for SquareMatrix as this does not rely on any square-specific features

//=================== main() ===============//

using namespace std;

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int m, n, p;
    Rational r;
    cin >> m >> n >> p >> r;

    Matrix<Rational> A(m, n);
    SquareMatrix<Rational> S(p);
    cin >> A >> S;

    try {
        cout << (A * S) * A.getTransposed() << endl;
    } catch (const MatrixWrongSizeError&) {
        cout << "A and S have not appropriate sizes for multiplication." << endl;
    }

    cout << (r * (S = S) * S).getSize() << endl;

    SquareMatrix<Rational> P(S);

    cout << (P * (S + S - Rational(3) * P)).getDeterminant() << endl;

    const SquareMatrix<Rational>& rS = S;

    cout << rS.getSize() << ' ' << rS.getDeterminant() << ' ' << rS.getTrace() << endl;
    cout << (S = S) * (S + rS) << endl;
    cout << (S *= S) << endl;

    try {
        cout << rS.getInverse() << endl;
        cout << P.invert().getTransposed().getDeterminant() << endl;
        cout << P << endl;
    } catch (const MatrixIsDegenerateError&) {
        cout << "Cannot inverse matrix." << endl;
    }

    return 0;
}

